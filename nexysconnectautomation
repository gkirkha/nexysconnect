Install dependencies:
bash
pip install requests asana stripe python-dotenv boto3

ZAPIER_HOOK_URL=<your_zapier_webhook_url>
ASANA_ACCESS_TOKEN=<your_asana_access_token>
ASANA_WORKSPACE_ID=<your_asana_workspace_id>
JOTFORM_API_KEY=<your_jotform_api_key>
STRIPE_SECRET_KEY=<your_stripe_secret_key>
AWS_REGION=<your_aws_region>


import os
import requests
import stripe
import asana
import boto3
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# API Keys & Configurations
ZAPIER_HOOK_URL = os.getenv("ZAPIER_HOOK_URL")
ASANA_ACCESS_TOKEN = os.getenv("ASANA_ACCESS_TOKEN")
ASANA_WORKSPACE_ID = os.getenv("ASANA_WORKSPACE_ID")
JOTFORM_API_KEY = os.getenv("JOTFORM_API_KEY")
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
AWS_REGION = os.getenv("AWS_REGION")

# Initialize AWS CloudWatch logging
logs_client = boto3.client("logs", region_name=AWS_REGION)
log_group = "StartupOpsLogs"

# Initialize Stripe
stripe.api_key = STRIPE_SECRET_KEY

# Initialize Asana Client
asana_client = asana.Client.access_token(ASANA_ACCESS_TOKEN)

# Function to log messages to CloudWatch
def log_message(message):
    logs_client.put_log_events(
        logGroupName=log_group,
        logStreamName="StartupOpsStream",
        logEvents=[{"timestamp": int(os.times()[4] * 1000), "message": message}],
    )

# 1. Fetch JotForm Submissions
def fetch_jotform_submissions():
    url = f"https://api.jotform.com/user/submissions?apikey={JOTFORM_API_KEY}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()["content"]
        log_message("Fetched JotForm submissions successfully.")
        return data
    else:
        log_message("Failed to fetch JotForm submissions.")
        return None

# 2. Create an Asana Task
def create_asana_task(task_name, notes):
    task_data = {
        "workspace": ASANA_WORKSPACE_ID,
        "name": task_name,
        "notes": notes,
    }
    try:
        asana_client.tasks.create(task_data)
        log_message(f"Asana task '{task_name}' created successfully.")
    except Exception as e:
        log_message(f"Asana task creation failed: {str(e)}")

# 3. Monitor Stripe Payments
def fetch_stripe_payments():
    try:
        payments = stripe.PaymentIntent.list(limit=5)
        log_message("Fetched Stripe payments successfully.")
        return payments["data"]
    except Exception as e:
        log_message(f"Failed to fetch Stripe payments: {str(e)}")
        return None

# 4. Send Data to Zapier
def send_to_zapier(data):
    try:
        response = requests.post(ZAPIER_HOOK_URL, json=data)
        if response.status_code == 200:
            log_message("Data successfully sent to Zapier.")
        else:
            log_message(f"Zapier webhook failed: {response.text}")
    except Exception as e:
        log_message(f"Zapier webhook error: {str(e)}")

# Main Execution
if __name__ == "__main__":
    jotform_data = fetch_jotform_submissions()
    if jotform_data:
        for submission in jotform_data:
            create_asana_task(
                f"Process Form: {submission['id']}",
                f"Form submitted by {submission['answers'].get('name', 'Unknown')}",
            )

    stripe_payments = fetch_stripe_payments()
    if stripe_payments:
        for payment in stripe_payments:
            send_to_zapier({"payment_id": payment["id"], "amount": payment["amount"]})



mkdir lambda_deployment
cd lambda_deployment

pip install requests asana stripe python-dotenv boto3 -t .
import os
import requests
import stripe
import asana
import boto3
from dotenv import load_dotenv

load_dotenv()

def lambda_handler(event, context):
    return {"statusCode": 200, "body": "Lambda function executed successfully!"}

zip -r lambda_deployment.zip .

aws lambda create-function \
    --function-name MyStartupOpsLambda \
    --runtime python3.8 \
    --role arn:aws:iam::<your-account-id>:role/<your-lambda-role> \
    --handler lambda_function.lambda_handler \
    --zip-file fileb://lambda_deployment.zip

Replace <your-account-id> and <your-lambda-role> with actual values.


Set up environment variables in AWS Lambda Console (or via CLI).

Example AWS CLI Command

aws lambda update-function-configuration \
    --function-name MyStartupOpsLambda \
    --environment "Variables={ZAPIER_HOOK_URL=<your_webhook>,STRIPE_SECRET_KEY=<your_key>}"
{{Test LAMBDA}}
aws lambda invoke --function-name MyStartupOpsLambda output.json

{{Test in AWS Console
Go to AWS Lambda Console
Select your function â†’ Click "Test"
Create a test event (use a sample JSON)
Click "Invoke"}}

{{Set Up AWS Lambda Triggers (Optional)
Amazon EventBridge (Scheduler) â†’ Run every 10 minutes
API Gateway â†’ Trigger from an HTTP request
S3 / DynamoDB â†’ Trigger on data updates

Example: Schedule Execution Every 10 Minutes}}

aws events put-rule --schedule-expression "rate(10 minutes)" --name LambdaScheduler
aws lambda add-permission --function-name MyStartupOpsLambda --action lambda:InvokeFunction --principal events.amazonaws.com --source-arn <your-rule-arn>

{{Monitor & Debug Logs
Check logs using AWS CloudWatch:}}
aws logs tail /aws/lambda/MyStartupOpsLambda --follow

{{Prerequisites AWS Lambda function is deployed (from the previous step)}}
Get Your Zapier Webhook URL
Go to Zapier â†’ Create a new Zap.
Choose "Webhooks by Zapier" as the trigger.
Select "Catch Hook" as the trigger event.
Click "Continue", then Copy the provided Webhook URL}}

https://hooks.zapier.com/hooks/catch/123456/abcdef/ {{Example, not actual}}
{{Modify lambda_function.py to send data to the Zapier Webhook}}

import os
import json
import requests
import boto3
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
ZAPIER_HOOK_URL = os.getenv("ZAPIER_HOOK_URL")

# Initialize AWS CloudWatch logging
logs_client = boto3.client("logs", region_name=os.getenv("AWS_REGION"))
log_group = "StartupOpsLogs"

def log_message(message):
    logs_client.put_log_events(
        logGroupName=log_group,
        logStreamName="StartupOpsStream",
        logEvents=[{"timestamp": int(os.times()[4] * 1000), "message": message}],
    )

# Function to send data to Zapier Webhook
def send_to_zapier(data):
    try:
        response = requests.post(ZAPIER_HOOK_URL, json=data)
        if response.status_code == 200:
            log_message("Successfully sent data to Zapier.")
            return {"status": "success", "response": response.json()}
        else:
            log_message(f"Zapier webhook failed: {response.text}")
            return {"status": "error", "message": response.text}
    except Exception as e:
        log_message(f"Zapier webhook error: {str(e)}")
        return {"status": "error", "message": str(e)}

# AWS Lambda Entry Point
def lambda_handler(event, context):
    sample_data = {
        "task_id": "12345",
        "task_name": "Automate Workflow",
        "status": "Completed"
    }

    zapier_response = send_to_zapier(sample_data)
    
    return {
        "statusCode": 200,
        "body": json.dumps(zapier_response)
    }

<<Zip and Upload to AWS>>
zip -r lambda_deployment.zip .
aws lambda update-function-code --function-name MyStartupOpsLambda --zip-file fileb://lambda_deployment.zip

aws lambda update-function-configuration \
    --function-name MyStartupOpsLambda \
    --environment "Variables={ZAPIER_HOOK_URL=<your_zapier_webhook_url>}"

<<Invoke Lambda Test>>
aws lambda invoke --function-name MyStartupOpsLambda output.json

<< Check Zapier
Go back to your Zapier Zap.
Click "Test Trigger" in the Webhook step.
If successful, it should show the sample task data received.
Click "Continue" and proceed with the next automation step (e.g., send data to Google Sheets, Asana, Slack, etc.).>>

Automate Zapier Execution
Schedule Lambda with AWS EventBridge to send data periodically.
Trigger Lambda via an API Gateway if needed.

<<Example EventBridge Rule to Trigger Every 10 Minutes from above>>
aws events put-rule --schedule-expression "rate(10 minutes)" --name LambdaToZapier
aws lambda add-permission --function-name MyStartupOpsLambda --action lambda:InvokeFunction --principal events.amazonaws.com --source-arn <your-rule-arn>

<<Expanding Zapier Automation & Enhancing Lambda Execution ðŸš€
Now, we will fully integrate AWS Lambda with Zapier to automate workflows end-to-end:
Send data to multiple services (Slack, Google Sheets, Asana, etc.)
Enhance error handling with retries
Monitor execution with AWS CloudWatch logs
Expand Zapier Actions
Zapier allows multi-step workflows, so we will:
 Trigger AWS Lambda â†’ Send task data to Zapier Webhook.
 Send task data to Google Sheets (for record-keeping).
  Create an Asana task (for team tracking).
    Send a Slack notification (to alert the team)>>

<<Update AWS Lambda to Format Data for Zapier
Modify lambda_function.py to send structured data for multi-step automation>>
import os
import json
import requests
import boto3
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
ZAPIER_HOOK_URL = os.getenv("ZAPIER_HOOK_URL")

# AWS CloudWatch Logging
logs_client = boto3.client("logs", region_name=os.getenv("AWS_REGION"))
log_group = "StartupOpsLogs"

def log_message(message):
    """Log messages to AWS CloudWatch."""
    logs_client.put_log_events(
        logGroupName=log_group,
        logStreamName="StartupOpsStream",
        logEvents=[{"timestamp": int(os.times()[4] * 1000), "message": message}],
    )

def send_to_zapier(data):
    """Send structured data to Zapier Webhook."""
    try:
        response = requests.post(ZAPIER_HOOK_URL, json=data)
        if response.status_code == 200:
            log_message("Successfully sent data to Zapier.")
            return {"status": "success", "response": response.json()}
        else:
            log_message(f"Zapier webhook failed: {response.text}")
            return {"status": "error", "message": response.text}
    except Exception as e:
        log_message(f"Zapier webhook error: {str(e)}")
        return {"status": "error", "message": str(e)}

# AWS Lambda Handler
def lambda_handler(event, context):
    task_data = {
        "task_id": "12345",
        "task_name": "Automate Workflow",
        "status": "Completed",
        "assigned_to": "John Doe",
        "due_date": "2025-02-10",
        "priority": "High"
    }

    zapier_response = send_to_zapier(task_data)
    
    return {
        "statusCode": 200,
        "body": json.dumps(zapier_response)
    }

<<Configure Zapier Steps
1Trigger: Webhooks by Zapier (already set up).
Action: Create Spreadsheet Row in Google Sheets

Select your Google Sheet.
<<Map the incoming data fields (task ID, name, status, etc.).
 Action: Create Task in Asana
Select your Asana project.
Set task name, due date, and assignee dynamically from Lambda data.
 Action: Send Slack Message
Select your Slack workspace & channel>>
New Task Created>>  
Task: {{task_name}}  
Status: {{status}}  
Assigned to: {{assigned_to}}  

<<Implement Error Handling & Retries
 Add Exponential Backoff for Failed Zapier Requests
Modify send_to_zapier() to retry failed requests>>
import time

def send_to_zapier(data, retries=3):
    """Send data to Zapier with retry mechanism."""
    for attempt in range(retries):
        try:
            response = requests.post(ZAPIER_HOOK_URL, json=data)
            if response.status_code == 200:
                log_message("Successfully sent data to Zapier.")
                return {"status": "success", "response": response.json()}
            else:
                log_message(f"Zapier webhook failed: {response.text}")
        except Exception as e:
            log_message(f"Zapier webhook error: {str(e)}")

        time.sleep(2 ** attempt)  # Exponential backoff

    return {"status": "error", "message": "Max retries reached"}

<<Monitor Lambda Execution with AWS CloudWatch
A. Enable Logging
Lambda logs are automatically stored in CloudWatch Logs under /aws/lambda/MyStartupOpsLambda.
Check logs using AWS CLI:>>

aws logs tail /aws/lambda/MyStartupOpsLambda --follow

<<Create a CloudWatch Alarm for Errors
Set up an alert if Lambda execution fails more than 3 times in 5 minutes>>
aws cloudwatch put-metric-alarm --alarm-name LambdaErrorAlert \
    --metric-name Errors \
    --namespace AWS/Lambda \
    --statistic Sum \
    --period 300 \
    --threshold 3 \
    --comparison-operator GreaterThanOrEqualToThreshold \
    --evaluation-periods 1 \
    --alarm-actions arn:aws:sns:us-east-1:123456789012:LambdaAlerts \
    --dimensions Name=FunctionName,Value=MyStartupOpsLambda

<<Automate Lambda Execution
A. Schedule Lambda to Run Every 10 Minutes
Use AWS EventBridge to trigger Lambda periodically>>

aws events put-rule --schedule-expression "rate(10 minutes)" --name LambdaToZapier
aws lambda add-permission --function-name MyStartupOpsLambda --action lambda:InvokeFunction --principal events.amazonaws.com --source-arn <your-rule-arn>

